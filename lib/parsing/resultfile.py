# -*- coding: utf-8 -*-
from __future__ import absolute_import

from ..cclogging import get_logger_for_name
from .resultentry import InvalidEntryError, CCResultEntry

logger = get_logger_for_name(__name__)


class CCResultFileParser(object):
    """
    This is a class for parsing the contents of a results file generated by lavalamp's Common Crawl analysis.
    """

    # Class Members

    # Instantiation

    def __init__(self, file_path):
        self._file_path = file_path

    # Static Methods

    # Class Methods

    # Public Methods

    def iter_entries(self):
        """
        Iterate over the contents of the entries found within the results file.
        :return: A generator that can be iterated over to retrieve all entries found in the
        results file.
        """
        for raw_entry in self.iter_raw_results():
            try:
                yield CCResultEntry(raw_entry)
            except InvalidEntryError:
                pass
            except ValueError as e:
                logger.error(
                    "Value error thrown when parsing %s: %s"
                    % (raw_entry, e.message)
                )

    def iter_raw_results(self):
        """
        Iterate over the contents of the results file and return strings containing one result entry
        each.
        :return: A generator for iterating over the contents of the results file and returning strings containing
        one result entry each
        """
        with open(self.file_path, "r") as f:
            current_entry = ""
            for line in f:
                line = line.strip()
                if not line:
                    continue
                current_entry = current_entry + line
                try:
                    int(current_entry[-1])
                    yield current_entry
                    current_entry = ""
                except ValueError:
                    pass
                except Exception:
                    import code
                    code.interact(local=locals())

    # Protected Methods

    # Private Methods

    # Properties

    @property
    def file_path(self):
        """
        Get the file path to where the results file resides.
        :return: the file path to where the results file resides.
        """
        return self._file_path

    # Representation and Comparison

    def __repr__(self):
        return "<%s - %s>" % (self.__class__.__name__, self.file_path)

